import{_ as t,c as a,o as i,j as e,a as o}from"./chunks/framework.DCKU21so.js";const m=JSON.parse('{"title":"面试题","description":"","frontmatter":{},"headers":[],"relativePath":"interview/6.frontend-interview-network/04. cookie和strorage/课件.md","filePath":"interview/6.frontend-interview-network/04. cookie和strorage/课件.md"}'),r={name:"interview/6.frontend-interview-network/04. cookie和strorage/课件.md"},n=e("h1",{id:"面试题",tabindex:"-1"},[o("面试题 "),e("a",{class:"header-anchor",href:"#面试题","aria-label":'Permalink to "面试题"'},"​")],-1),s=e("p",null,"cookie/sessionStorage/localStorage 的区别",-1),c=e("blockquote",null,[e("p",null,"参考答案："),e("p",null,"cookie、sessionStorage、localStorage 都是保存本地数据的方式"),e("p",null,[o("其中，cookie 兼容性较好，所有浏览器均支持。浏览器针对 cookie 会有一些默认行为，比如当响应头中出现"),e("code",null,"set-cookie"),o("字段时，浏览器会自动保存 cookie 的值；再比如，浏览器发送请求时，会附带匹配的 cookie 到请求头中。这些默认行为，使得 cookie 长期以来担任着维持登录状态的责任。与此同时，也正是因为浏览器的默认行为，给了恶意攻击者可乘之机，CSRF 攻击就是一个典型的利用 cookie 的攻击方式。虽然 cookie 不断的改进，但前端仍然需要另一种更加安全的保存数据的方式")]),e("p",null,"HTML5 新增了 sessionStorage 和 localStorage，前者用于保存会话级别的数据，后者用于更持久的保存数据。浏览器针对它们没有任何默认行为，这样一来，就把保存数据、读取数据的工作交给了前端开发者，这就让恶意攻击者难以针对登录状态进行攻击。 cookie 的大小是有限制的，一般浏览器会限制同一个域下的 cookie 总量不超过 4KB，而 sessionStorage 和 localStorage 则拥有更大的空间，多数浏览器一般要求不超过 5MB~10MB cookie 会与 domain、path 关联，而 sessionStorage 和 localStorage 只与 domain 关联")],-1),l=[n,s,c];function d(k,_,p,g,h,u){return i(),a("div",null,l)}const S=t(r,[["render",d]]);export{m as __pageData,S as default};
